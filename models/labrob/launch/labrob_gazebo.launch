<launch>
  <!-- roslaunch arguments -->
  <arg name="show_rviz" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of
    the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- <arg name="world_name" value="$(find swarm)/worlds/inclined_world.world" /> -->
    <!-- <arg name="world_name" value="$(find mybot_gazebo)/worlds/mybot.world"/> -->
    <!-- <arg name="world_name" value="worlds/empty.world" /> -->
    <!-- <arg name="world_name" value="$(find robot_models)/worlds/grid_world.world"/> -->
    <arg name="paused" value="$(arg paused)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="true" />
    <arg name="headless" value="false" />
  </include>

  <!-- urdf xml robot description loaded on the Parameter Server-->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find robot_models)/models/labrob/urdf/labrob.urdf.xacro'" />

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="labrob_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
    args="-urdf -param robot_description -model labrob" />
    
  <!-- Nodelet Fake Laser -->
  <!-- <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="/depth_camera/depth_camera/depth/points"/>
        <remap from="scan" to="/scan"/>
        <rosparam>
            target_frame: depth_camera_depth_frame # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.0
            max_height: 1.0

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node> -->


  <!-- Fake laser -->
  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/depth_camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/depth_camera/depth_camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>


  <!-- robot visualization in Rviz -->
  <group if="$(arg show_rviz)">
    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find robot_models)/models/labrob/launch/gazebo.rviz"/>

    
    <rosparam file="$(find robot_models)/models/labrob/control/config/joint_position_control.yaml" command="load" />
   
    <node name="labrob_controller" pkg="controller_manager" type="spawner" output="screen"
      args="joint_state_controller" />

    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
      <param name="publish_frequency" value="50"/> 
    </node>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="tf_1" args="0 0 0 0 0 0 odom world 100" />

  <include file="$(find octomap_server)/launch/octomap_mapping.launch"/>
  
</launch>
